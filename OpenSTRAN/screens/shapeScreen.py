import sys
import os

# import Tkinter
if sys.version_info[0] >= 3:
	import tkinter as tk
	from tkinter import ttk
else:
	import Tkinter as tk
	from Tkinter import ttk

# Project User Interface Imports
from .frames.IShapes import IShapes
from .frames.Channels import Channels
from .frames.Angles import Angles

class shapeSelector(ttk.Frame):
	def __init__(self, parent, query, var=None):
		ttk.Frame.__init__(self, parent)

		self.parent = parent
		self.query = query
		self.var = None if var == None else var

		self.shape = None

		# Set the title for the Shape Selection Window
		self.parent.title('Shape Selection')

		# Set the default geometry for the Shape Selection Window
		self.parent.geometry('750x430')

		# Disable User Adjustment
		self.parent.resizable(width=False, height=False)

		# Automatically Set the Shape Selection Window to Active State
		self.parent.focus_force()

		# Allow One Instance of the Shape Selection Window
		self.parent.grab_set()

		# Define and show a tabbed layout
		self.n = ttk.Notebook(self.parent)
		self.n.grid(
			column = 0,
			row = 0,
			columnspan = 15,
			pady = 10,
			padx = 10
			)

		# Bind the tabChange function to the tabbed layout
		self.n.bind('<<NotebookTabChanged>>', lambda e: self.tabChange())

		# Define the tabs
		self.IShapes = ttk.Frame(
			self.n,
			width=730,
			height=350,
			)
		self.Channels = ttk.Frame(
			self.n,
			width=730,
			height=350
			)
		self.Angles = ttk.Frame(
			self.n,
			width=730,
			height=350
			)
		self.Tees = ttk.Frame(
			self.n,
			width=730,
			height=350
			)
		self.HSS = ttk.Frame(
			self.n,
			width=730,
			height=350
			)

		# Label the tabs
		self.n.add(
			self.IShapes,
			text='I Shapes'
			)
		self.n.add(
			self.Channels,
			text='Channels'
			)
		self.n.add(
			self.Angles,
			text='Angles [WIP]',
			state='disabled'
			)
		self.n.add(
			self.Tees,
			text='Structural Tees [WIP]',
			state='disabled'
			)
		self.n.add(
			self.HSS,
			text='Hollow Structural Sections (HSS) [WIP]',
			state='disabled'
			)

		# Add OK and Cancel Buttons
		self.ok = ttk.Button(
			self.parent,
			text = 'OK',
			command = self.OK,
			default = 'active'
			)
		self.cancel = ttk.Button(
			self.parent,
			text = 'Cancel',
			command = self.Cancel
			)

		# Bind Enter and Escape Keys to OK and Cancel Buttons
		self.parent.bind('<Key-Return>', lambda e: self.ok.invoke())
		self.parent.bind('<Key-Escape>', lambda e: self.cancel.invoke())

		# Display OK and Cancel Buttons
		self.ok.grid(
			column = 13,
			row = 1,
			sticky = ['n','s','e','w'],
			padx = [15,5]
			)
		self.cancel.grid(
			column = 14,
			row = 1,
			sticky = ['n','s','e','w'],
			padx = [5,15]
			)

	def tabChange(self):
		
		# remove instances of children generated by previous tab changes
		for frame in self.n.winfo_children():
			for widget in frame.winfo_children():
				widget.destroy()

		if self.n.select() == str(self.IShapes):
			self.shape = IShapes(self.IShapes, self.query)

		elif self.n.select() == str(self.Channels):
			self.shape = Channels(self.Channels, self.query)

		elif self.n.select() == str(self.Angles):
			self.shape = Angles(self.Angles, self.query)

		elif self.n.select() == str(self.Tees):
			TShapes(self.IShapes, self.query)

		elif self.n.select() == str(self.HSS):
			HSS(self.IShapes, self.query)

	def OK(self):
		if self.var != None:
			self.var.set(self.shape.shape)
		self.parent.destroy()

	def Cancel(self):
		print('Cancel')
		self.parent.destroy()